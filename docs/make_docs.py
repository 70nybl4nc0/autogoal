# Convert examples in this folder to their corresponding .md files in docs/examples

import re
import inspect
import textwrap
import datetime
from pathlib import Path


def hide(line):
    return ":hide:" in line


def build_examples():
    current = Path(__file__)
    folder = current.parent

    for fname in folder.rglob("*.py"):
        if fname.name.startswith("_"):
            continue
        if fname.name == current.name:
            continue

        process(fname)


class Markdown:
    def __init__(self, content):
        while content:
            if not content[0].strip():
                content.pop(0)
            else:
                break

        while content:
            if not content[-1].strip():
                content.pop()
            else:
                break

        self.content = content

    def print(self, fp):
        for line in self.content:
            if line.startswith("# "):
                fp.write(line[2:])
            else:
                fp.write("\n")

        fp.write("\n")


class Python(Markdown):
    def print(self, fp):
        if not self.content:
            return

        fp.write("```python\n")

        for line in self.content:
            fp.write(line)

        fp.write("```\n\n")


def process(fname: Path):
    print(fname)

    content = []

    with fname.open("r") as fp:
        current = []
        state = 'markdown'

        for line in fp:
            if hide(line):
                continue

            if line.startswith("#"):
                if state == 'python':
                    if current:
                        content.append(Python(current))
                        current = []
                    state = 'markdown'
                current.append(line)
            else:
                if state == 'markdown':
                    if current:
                        content.append(Markdown(current))
                        current = []
                    state = 'python'
                current.append(line)

        if current:
            if state == 'markdown':
                content.append(Markdown(current))
            else:
                content.append(Python(current))

    output = fname.parent / (fname.name[:-3] + ".md")

    with output.open("w") as fp:
        for c in content:
            c.print(fp)


def build_api():
    import autogoal
    import autogoal.grammar
    import autogoal.search
    import autogoal.contrib
    import autogoal.contrib.sklearn
    import autogoal.contrib.keras
    import autogoal.datasets
    import autogoal.datasets.movie_reviews

    generate(autogoal)


def generate(module, visited=set()):
    name = module.__name__

    if name in visited:
        return

    visited.add(name)
    print(name)

    path = Path(__file__).parent / 'api' / (name + ".md")
    submodules = []
    classes = []
    functions = []

    for key, obj in vars(module).items():
        if key.startswith("_"):
            continue

        if inspect.ismodule(obj):
            if not obj.__name__.startswith('autogoal'):
                continue

            submodules.append(obj)

        elif inspect.isclass(obj):
            classes.append(obj)

        elif inspect.isfunction(obj):
            functions.append(obj)

    with open(path, "w") as fp:
        generate_module(module, name, fp)

        if submodules:
            fp.write("\n## Submodules\n\n")

        for submodule in submodules:
            fp.write(f"* [{submodule.__name__}](/api/{submodule.__name__}/)\n")
            generate(submodule)

        if classes:
            fp.write("\n## Classes\n\n")

        for clss in classes:
            generate_class(clss, name, fp)

        if functions:
            fp.write("\n## Functions\n\n")

        for func in functions:
            generate_func(func, name, fp)


def generate_class(clss, name, fp):
    print(name, clss)
    fp.write(f"### `{clss.__name__}`\n\n")
    fp.write(f"> `{clss.__name__}{ inspect.signature(clss.__init__) }`\n\n")

    if clss.__doc__:
        fp.write(textwrap.dedent(clss.__doc__))
        fp.write("\n")
    else:
        fp.write(textwrap.dedent(
            """
            !!! warning
                This class has no docstrings.\n
            """
        ))


def generate_func(func, name, fp):
    print(name, func)
    fp.write(f"### `{func.__name__}`\n\n")
    fp.write(f"> `{func.__name__}{ inspect.signature(func) }`\n\n")

    if func.__doc__:
        fp.write(textwrap.dedent(func.__doc__))
        fp.write("\n")
    else:
        fp.write(textwrap.dedent(
            """
            !!! warning
                This class has no docstrings.\n
            """
        ))


def generate_module(module, name, fp):
    doc = module.__doc__
    fp.write(f"# `{module.__name__}`\n")

    if doc is not None:
        fp.write(doc)

    fp.write(textwrap.dedent(
        f"""
        !!! note
            This documentation has been autogenerated from the source code located at `{name}`.
        """
    ))


if __name__ == "__main__":
    build_examples()
    build_api()
