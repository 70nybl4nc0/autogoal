# AUTOGENERATED ON 2019-12-27 15:06:52.281780
## DO NOT MODIFY THIS FILE MANUALLY


import keras.layers
from ..base import BaseObject
from ..base import register_concrete_class
from ..base import Discrete
from ..base import Continuous
from .._keras import KerasWrapper


@register_concrete_class
class ActivityRegularizationLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.ActivityRegularization
		self.kwargs = {}


@register_concrete_class
class AddLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Add
		self.kwargs = {}


@register_concrete_class
class AlphaDropoutLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
		rate: Continuous(0.0, 1.0),
	):
		self.keras_class = keras.layers.AlphaDropout
		self.kwargs = {}
		self.kwargs['rate'] = rate


@register_concrete_class
class AverageLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Average
		self.kwargs = {}


@register_concrete_class
class AveragePooling1DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.AveragePooling1D
		self.kwargs = {}


@register_concrete_class
class AveragePooling2DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.AveragePooling2D
		self.kwargs = {}


@register_concrete_class
class AveragePooling3DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.AveragePooling3D
		self.kwargs = {}


@register_concrete_class
class AveragePooling1DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.AveragePooling1D
		self.kwargs = {}


@register_concrete_class
class AveragePooling2DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.AveragePooling2D
		self.kwargs = {}


@register_concrete_class
class AveragePooling3DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.AveragePooling3D
		self.kwargs = {}


@register_concrete_class
class BatchNormalizationLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.BatchNormalization
		self.kwargs = {}


@register_concrete_class
class ConcatenateLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Concatenate
		self.kwargs = {}


@register_concrete_class
class Cropping1DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Cropping1D
		self.kwargs = {}


@register_concrete_class
class Cropping2DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Cropping2D
		self.kwargs = {}


@register_concrete_class
class Cropping3DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Cropping3D
		self.kwargs = {}


@register_concrete_class
class DenseLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
		units: Discrete(0, 100),
	):
		self.keras_class = keras.layers.Dense
		self.kwargs = {}
		self.kwargs['units'] = units


@register_concrete_class
class DropoutLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
		rate: Continuous(0.0, 1.0),
	):
		self.keras_class = keras.layers.Dropout
		self.kwargs = {}
		self.kwargs['rate'] = rate


@register_concrete_class
class ELULayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.ELU
		self.kwargs = {}


@register_concrete_class
class EmbeddingLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
		input_dim: Discrete(0, 100),
		output_dim: Discrete(0, 100),
	):
		self.keras_class = keras.layers.Embedding
		self.kwargs = {}
		self.kwargs['input_dim'] = input_dim
		self.kwargs['output_dim'] = output_dim


@register_concrete_class
class FlattenLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Flatten
		self.kwargs = {}


@register_concrete_class
class GaussianDropoutLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
		rate: Continuous(0.0, 1.0),
	):
		self.keras_class = keras.layers.GaussianDropout
		self.kwargs = {}
		self.kwargs['rate'] = rate


@register_concrete_class
class GaussianNoiseLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
		stddev: Continuous(0.0, 1.0),
	):
		self.keras_class = keras.layers.GaussianNoise
		self.kwargs = {}
		self.kwargs['stddev'] = stddev


@register_concrete_class
class GlobalAveragePooling1DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.GlobalAveragePooling1D
		self.kwargs = {}


@register_concrete_class
class GlobalAveragePooling2DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.GlobalAveragePooling2D
		self.kwargs = {}


@register_concrete_class
class GlobalAveragePooling3DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.GlobalAveragePooling3D
		self.kwargs = {}


@register_concrete_class
class GlobalAveragePooling1DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.GlobalAveragePooling1D
		self.kwargs = {}


@register_concrete_class
class GlobalAveragePooling2DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.GlobalAveragePooling2D
		self.kwargs = {}


@register_concrete_class
class GlobalAveragePooling3DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.GlobalAveragePooling3D
		self.kwargs = {}


@register_concrete_class
class GlobalMaxPooling1DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.GlobalMaxPooling1D
		self.kwargs = {}


@register_concrete_class
class GlobalMaxPooling2DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.GlobalMaxPooling2D
		self.kwargs = {}


@register_concrete_class
class GlobalMaxPooling3DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.GlobalMaxPooling3D
		self.kwargs = {}


@register_concrete_class
class GlobalMaxPooling1DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.GlobalMaxPooling1D
		self.kwargs = {}


@register_concrete_class
class GlobalMaxPooling2DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.GlobalMaxPooling2D
		self.kwargs = {}


@register_concrete_class
class GlobalMaxPooling3DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.GlobalMaxPooling3D
		self.kwargs = {}


@register_concrete_class
class LeakyReLULayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.LeakyReLU
		self.kwargs = {}


@register_concrete_class
class MaskingLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Masking
		self.kwargs = {}


@register_concrete_class
class MaxPooling1DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.MaxPooling1D
		self.kwargs = {}


@register_concrete_class
class MaxPooling2DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.MaxPooling2D
		self.kwargs = {}


@register_concrete_class
class MaxPooling3DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.MaxPooling3D
		self.kwargs = {}


@register_concrete_class
class MaxPooling1DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.MaxPooling1D
		self.kwargs = {}


@register_concrete_class
class MaxPooling2DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.MaxPooling2D
		self.kwargs = {}


@register_concrete_class
class MaxPooling3DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.MaxPooling3D
		self.kwargs = {}


@register_concrete_class
class MaximumLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Maximum
		self.kwargs = {}


@register_concrete_class
class MinimumLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Minimum
		self.kwargs = {}


@register_concrete_class
class MultiplyLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Multiply
		self.kwargs = {}


@register_concrete_class
class PReLULayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.PReLU
		self.kwargs = {}


@register_concrete_class
class ReLULayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.ReLU
		self.kwargs = {}


@register_concrete_class
class RecurrentLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Recurrent
		self.kwargs = {}


@register_concrete_class
class RepeatVectorLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
		n: Discrete(0, 100),
	):
		self.keras_class = keras.layers.RepeatVector
		self.kwargs = {}
		self.kwargs['n'] = n


@register_concrete_class
class SoftmaxLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Softmax
		self.kwargs = {}


@register_concrete_class
class SubtractLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Subtract
		self.kwargs = {}


@register_concrete_class
class ThresholdedReLULayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.ThresholdedReLU
		self.kwargs = {}


@register_concrete_class
class UpSampling1DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.UpSampling1D
		self.kwargs = {}


@register_concrete_class
class UpSampling2DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.UpSampling2D
		self.kwargs = {}


@register_concrete_class
class UpSampling3DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.UpSampling3D
		self.kwargs = {}


@register_concrete_class
class ZeroPadding1DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.ZeroPadding1D
		self.kwargs = {}


@register_concrete_class
class ZeroPadding2DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.ZeroPadding2D
		self.kwargs = {}


@register_concrete_class
class ZeroPadding3DLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.ZeroPadding3D
		self.kwargs = {}


@register_concrete_class
class BertLayer(BaseObject, KerasWrapper):
	def __init__(
		self,
	):
		self.keras_class = keras.layers.Bert
		self.kwargs = {}


